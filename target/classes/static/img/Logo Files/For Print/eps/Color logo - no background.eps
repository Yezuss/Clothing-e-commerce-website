%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 1669
%%HiResBoundingBox: 0 0 2394 1668.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 1668.95996 re
W
q
[0.24 0 0 -0.24 0 1668.95996] cm
q
0 0 9975 6953.125 re
W*
q
[80.748863 0 0 80.764168 300.02881 300.05502] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
116.099998 78.699997 m
0 78.699997 l
0 0 l
116.099998 0 l
116.099998 78.699997 l
h
2 76.699997 m
114.099998 76.699997 l
114.099998 2 l
2 2 l
2 76.699997 l
h
f
Q
q
[82.735291 0 0 82.750969 1880.7362 477.25803] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
1.2 40 m
1.2 35.52 l
2.04 34.959999 l
2.04 17.039999 l
1.2 16.479999 l
1.2 12 l
7.4 12 l
11.56 22.6 l
15.719999 12 l
21.919998 12 l
21.919998 16.479999 l
21.079998 17.039999 l
21.079998 34.959999 l
21.919998 35.52 l
21.919998 40 l
15.199999 40 l
15.199999 35.52 l
16.039999 34.959999 l
16.039999 25 l
13.56 31.32 l
9.56 31.32 l
7.079999 25 l
7.079999 34.959999 l
7.92 35.52 l
7.92 40 l
1.2 40 l
1.2 40 l
h
23.52 40 m
23.52 35.52 l
24.360001 34.959999 l
28 17.039999 l
27.16 16.479999 l
27.16 12 l
37.799999 12 l
37.799999 16.479999 l
36.959999 17.039999 l
40.599998 34.959999 l
41.439999 35.52 l
41.439999 40 l
36.48 40 l
35.239998 33.84 l
29.719997 33.84 l
28.479998 40 l
23.519997 40 l
23.52 40 l
h
30.76 28.799999 m
34.200001 28.799999 l
32.48 20.239998 l
30.76 28.799999 l
h
43.040001 40 m
43.040001 35.52 l
43.880001 34.959999 l
43.880001 17.039999 l
43.040001 16.479999 l
43.040001 12 l
49.760002 12 l
49.760002 16.479999 l
48.920002 17.039999 l
48.920002 34.959999 l
51.720001 34.959999 l
52.280003 34.119999 l
56.760002 34.119999 l
56.760002 40 l
43.040001 40 l
h
59.16 40 m
59.16 35.52 l
60 34.959999 l
60 17.039999 l
59.16 16.479999 l
59.16 12 l
73.720001 12 l
73.720001 17.880001 l
69.239998 17.880001 l
68.68 17.040001 l
65.040001 17.040001 l
65.040001 23.480001 l
71.480003 23.480001 l
71.480003 28.52 l
65.040001 28.52 l
65.040001 34.959999 l
68.68 34.959999 l
69.239998 34.119999 l
73.720001 34.119999 l
73.720001 40 l
59.16 40 l
h
f
Q
q
[49.983032 0 0 49.992504 1920.0389 3480.8384] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
1.2 40 m
1.2 35.52 l
2.04 34.959999 l
2.04 17.039999 l
1.2 16.479999 l
1.2 12 l
15.76 12 l
15.76 17.880001 l
11.280001 17.880001 l
10.72 17.040001 l
7.08 17.040001 l
7.08 23.480001 l
13.520001 23.480001 l
13.520001 28.52 l
7.08 28.52 l
7.08 34.959999 l
7.920001 35.52 l
7.920001 40 l
1.200001 40 l
1.2 40 l
h
17.360001 40 m
17.360001 35.52 l
18.200001 34.959999 l
21.84 17.039999 l
21 16.479999 l
21 12 l
31.639999 12 l
31.639999 16.479999 l
30.799999 17.039999 l
34.439999 34.959999 l
35.279999 35.52 l
35.279999 40 l
30.32 40 l
29.08 33.84 l
23.559999 33.84 l
22.32 40 l
17.360001 40 l
h
24.6 28.799999 m
28.040001 28.799999 l
26.320002 20.239998 l
24.6 28.799999 l
h
40.599998 40 m
36.879997 36.279999 l
36.879997 31.039999 l
41.919998 31.039999 l
41.919998 34.200001 l
42.679996 34.959999 l
46.759995 34.959999 l
47.519993 34.200001 l
47.519993 29.280001 l
46.759995 28.52 l
40.599995 28.52 l
36.879993 24.800001 l
36.879993 15.720001 l
40.599995 12.000001 l
48.839996 12.000001 l
52.559998 15.720001 l
52.559998 20.960001 l
47.519997 20.960001 l
47.519997 17.800001 l
46.759998 17.040001 l
42.68 17.040001 l
41.920002 17.800001 l
41.920002 22.720001 l
42.68 23.480001 l
48.84 23.480001 l
52.560001 27.200001 l
52.560001 36.279999 l
48.84 40 l
40.599998 40 l
h
54.959999 40 m
54.959999 35.52 l
55.799999 34.959999 l
55.799999 17.039999 l
54.959999 16.479999 l
54.959999 12 l
61.68 12 l
61.68 16.479999 l
60.84 17.039999 l
60.84 23.48 l
67 23.48 l
67 17.039999 l
66.160004 16.479999 l
66.160004 12 l
72.880005 12 l
72.880005 16.479999 l
72.040009 17.039999 l
72.040009 34.959999 l
72.880005 35.52 l
72.880005 40 l
66.160004 40 l
66.160004 35.52 l
67 34.959999 l
67 28.519999 l
60.84 28.519999 l
60.84 34.959999 l
61.68 35.52 l
61.68 40 l
54.959999 40 l
h
75.279999 40 m
75.279999 35.52 l
76.119995 34.959999 l
76.119995 17.039999 l
75.279999 16.479999 l
75.279999 12 l
82 12 l
82 16.479999 l
81.160004 17.039999 l
81.160004 34.959999 l
82 35.52 l
82 40 l
75.279999 40 l
h
88.120003 40 m
84.400002 36.279999 l
84.400002 15.719999 l
88.120003 11.999999 l
97.200005 11.999999 l
100.920006 15.719999 l
100.920006 36.279999 l
97.200005 40 l
88.120003 40 l
h
90.199997 34.959999 m
95.119995 34.959999 l
95.879997 34.200001 l
95.879997 17.800001 l
95.119995 17.040001 l
90.199997 17.040001 l
89.439995 17.800001 l
89.439995 34.200001 l
90.199997 34.959999 l
h
103.32 40 m
103.32 35.52 l
104.159996 34.959999 l
104.159996 17.039999 l
103.32 16.479999 l
103.32 12 l
109.519997 12 l
115.360001 26.959999 l
115.360001 17.039999 l
114.520004 16.479999 l
114.520004 12 l
121.240005 12 l
121.240005 16.479999 l
120.400009 17.039999 l
120.400009 40 l
115.040009 40 l
109.200012 25.040001 l
109.200012 34.959999 l
110.040009 35.52 l
110.040009 40 l
103.320007 40 l
103.32 40 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
